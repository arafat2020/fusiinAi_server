// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
  binaryTargets = "rhel-openssl-1.0.x"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Artist {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String      @unique
  about      String
  profilePic String?
  email      String      @unique
  password   String
  joinedAt   DateTime    @default(now())
  artWorks   Art[]
  react      React[]
  comment    Comment[]
  Favourite  Favourite[]
  ArtGroup   ArtGroup[]
}

model Art {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  img            String
  tag            String
  createdAt      DateTime?        @default(now())
  width          Int
  height         Int
  nsfw           Boolean          @default(false)
  hide           Boolean          @default(true)
  prompt         String?
  negetivePrompt String?
  Sampler        String?
  CFGscale       Int?
  Steps          Int?
  Seed           Int?
  Clip_skip      Int?
  chackPoint     String?
  lora           String?
  Artist         Artist           @relation(fields: [artistId], references: [id])
  artistId       String           @db.ObjectId
  react          React[]
  comment        Comment[]
  Favourite      Favourite[]
  CompressImgRef CompressImgRef[]
}

model React {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  type     String @default("Like")
  Artist   Artist @relation(fields: [artistId], references: [id])
  artistId String @db.ObjectId
  Art      Art    @relation(fields: [artId], references: [id])
  artId    String @db.ObjectId
}

model Comment {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  commet   String
  date     DateTime @default(now())
  Art      Art      @relation(fields: [artId], references: [id])
  artId    String   @db.ObjectId
  Artist   Artist   @relation(fields: [artistId], references: [id])
  artistId String   @db.ObjectId
}

model Favourite {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  Art      Art?    @relation(fields: [artId], references: [id])
  artId    String? @db.ObjectId
  Artist   Artist? @relation(fields: [artistId], references: [id])
  artistId String? @db.ObjectId
}

model ArtGroup {
  id         String           @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  imageGroup CompressImgRef[]
  user       Artist           @relation(fields: [artistId], references: [id])
  artistId   String           @db.ObjectId
}

model CompressImgRef {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  ref          Art       @relation(fields: [artId], references: [id])
  artId        String    @db.ObjectId
  compress_url String
  ArtGroup     ArtGroup? @relation(fields: [artGroupId], references: [id])
  artGroupId   String?   @db.ObjectId
}
